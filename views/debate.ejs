<div class="container-fluid py-4">
    <div class="row">
        <!-- Main Debate Area -->
        <div class="col-lg-8">
            <div class="card">
                <div class="card-header bg-primary text-white">
                    <div class="d-flex justify-content-between align-items-center">
                        <h4 class="mb-0">
                            <i class="bi bi-chat-dots"></i> Live Debate
                        </h4>
                        <div class="d-flex gap-2">
                            <span class="badge bg-light text-dark" id="roundCounter">
                                Round: <span id="currentRound">0</span>/<span id="maxRounds">0</span>
                            </span>
                            <span class="badge bg-light text-dark" id="statusBadge">
                                <span id="statusText">Active</span>
                            </span>
                        </div>
                    </div>
                </div>
                <div class="card-body">
                    <div class="mb-3">
                        <h5>Problem:</h5>
                        <p class="text-muted" id="problemText">Loading...</p>
                    </div>
                    
                    <div class="debate-container" id="debateContainer">
                        <div class="text-center text-muted py-4">
                            <i class="bi bi-hourglass-split display-4"></i>
                            <p class="mt-2">Waiting for the debate to begin...</p>
                        </div>
                    </div>
                    
                    <div class="typing-indicator" id="typingIndicator">
                        <i class="bi bi-three-dots"></i> <span id="currentSpeaker">Someone</span> is thinking...
                    </div>
                </div>
            </div>
        </div>
        
        <!-- Controls Sidebar -->
        <div class="col-lg-4">
            <div class="controls-section mb-4">
                <h5><i class="bi bi-gear"></i> Debate Controls</h5>
                <div class="d-grid gap-2">
                    <button class="btn btn-primary" id="startDebateBtn">
                        <i class="bi bi-play-circle"></i> Start Debate
                    </button>
                    <button class="btn btn-outline-primary" id="pauseResumeBtn" style="display: none;">
                        <i class="bi bi-pause-circle"></i> Pause Debate
                    </button>
                    <button class="btn btn-outline-warning" id="forceVoteBtn">
                        <i class="bi bi-check-circle"></i> Force Final Vote
                    </button>
                    <a href="/debate/<%= sessionId %>/export" class="btn btn-outline-success" id="exportBtn">
                        <i class="bi bi-download"></i> Export PDF
                    </a>
                    <button class="btn btn-outline-danger" onclick="deleteCurrentSession()">
                        <i class="bi bi-trash"></i> Delete Session
                    </button>
                </div>
            </div>
            
            <div class="controls-section mb-4">
                <h5><i class="bi bi-people"></i> Council Members</h5>
                <div id="participantsList">
                    <!-- Participants will be populated here -->
                </div>
                <hr>
                <button class="btn btn-outline-info btn-sm" data-bs-toggle="modal" data-bs-target="#addParticipantModal">
                    <i class="bi bi-plus-circle"></i> Add Member
                </button>
            </div>
            
            <div class="controls-section">
                <h5><i class="bi bi-info-circle"></i> Session Info</h5>
                <div class="row">
                    <div class="col-6">
                        <small class="text-muted">Difficulty:</small>
                        <p class="mb-1" id="difficultyText">-</p>
                    </div>
                    <div class="col-6">
                        <small class="text-muted">Members:</small>
                        <p class="mb-1" id="memberCountText">-</p>
                    </div>
                </div>
                <div class="row">
                    <div class="col-6">
                        <small class="text-muted">Started:</small>
                        <p class="mb-1" id="startTimeText">-</p>
                    </div>
                    <div class="col-6">
                        <small class="text-muted">Duration:</small>
                        <p class="mb-1" id="durationText">-</p>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Add Participant Modal -->
<div class="modal fade" id="addParticipantModal" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Add Council Member</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <div class="mb-3">
                    <label for="personalitySelect" class="form-label">Choose Personality</label>
                    <select class="form-select" id="personalitySelect">
                        <option value="">Select a personality...</option>
                        <option value="Professor Euclid">Professor Euclid - Geometric Rigor</option>
                        <option value="Dr. Chaos">Dr. Chaos - Probabilistic Insights</option>
                        <option value="Ms. Approximation">Ms. Approximation - Numerical Methods</option>
                        <option value="The Trickster">The Trickster - Counterintuitive Solutions</option>
                        <option value="The Philosopher">The Philosopher - Mathematical Philosophy</option>
                        <option value="Dr. Algorithm">Dr. Algorithm - Computational Methods</option>
                        <option value="Professor Infinity">Professor Infinity - Abstract Theory</option>
                    </select>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-primary" onclick="addParticipant()">Add Member</button>
            </div>
        </div>
    </div>
</div>

<script>
    const sessionId = <%- sessionId %>;
    let sessionData = null;
    let isPaused = false;
    let debateInterval = null;
    let isDebateStarted = false;
    
    // Wait for socket to be available
    window.addEventListener('socketReady', function() {
        // Join the session room
        socket.emit('join-session', sessionId);
        
        // Load initial session data
        loadSessionData();
    });
    
    // Fallback: if socketReady doesn't fire, try after a delay
    setTimeout(function() {
        if (typeof socket !== 'undefined' && socket) {
            socket.emit('join-session', sessionId);
            loadSessionData();
        }
    }, 1000);
    
    // Socket event listeners - wait for socket to be available
    window.addEventListener('socketReady', function() {
        socket.on('new-message', (message) => {
            addMessageToDebate(message);
            updateRoundCounter();
        });
        
        socket.on('typing', (speakerName) => {
            document.getElementById('currentSpeaker').textContent = speakerName;
            document.getElementById('typingIndicator').style.display = 'block';
            
            setTimeout(() => {
                document.getElementById('typingIndicator').style.display = 'none';
            }, 3000);
        });
        
        socket.on('session-updated', (session) => {
            sessionData = session;
            updateSessionDisplay();
        });
        
        socket.on('debate-complete', () => {
            showAlert('Debate has concluded!', 'success');
            document.getElementById('statusText').textContent = 'Complete';
            document.getElementById('statusBadge').className = 'badge bg-success text-white';
            stopDebate();
        });
    });
    
    // Event listeners - wait for DOM to be ready
    document.addEventListener('DOMContentLoaded', function() {
        const pauseResumeBtn = document.getElementById('pauseResumeBtn');
        const forceVoteBtn = document.getElementById('forceVoteBtn');
        const startDebateBtn = document.getElementById('startDebateBtn');
        
        if (pauseResumeBtn) pauseResumeBtn.addEventListener('click', togglePause);
        if (forceVoteBtn) forceVoteBtn.addEventListener('click', forceVote);
        if (startDebateBtn) startDebateBtn.addEventListener('click', startDebate);
    });
    
    function loadSessionData() {
        fetch(`/api/session/${sessionId}`)
            .then(response => response.json())
            .then(data => {
                sessionData = data;
                updateSessionDisplay();
                loadMessages();
                
                // Check if debate is already complete
                if (data.isComplete) {
                    document.getElementById('statusText').textContent = 'Complete';
                    document.getElementById('statusBadge').className = 'badge bg-success text-white';
                }
            })
            .catch(error => {
                console.error('Error loading session data:', error);
                showAlert('Error loading session data', 'danger');
            });
    }
    
    function updateSessionDisplay() {
        if (!sessionData) return;
        
        document.getElementById('problemText').textContent = sessionData.problem;
        document.getElementById('difficultyText').textContent = sessionData.difficulty.charAt(0).toUpperCase() + sessionData.difficulty.slice(1);
        document.getElementById('memberCountText').textContent = sessionData.participants.length;
        document.getElementById('startTimeText').textContent = new Date(sessionData.created_at).toLocaleTimeString();
        
        // Update round counter
        document.getElementById('currentRound').textContent = sessionData.roundCount || 0;
        document.getElementById('maxRounds').textContent = sessionData.maxRounds || 10;
        
        // Update participants list
        updateParticipantsList();
        
        // Update status and buttons
        if (sessionData.isComplete) {
            document.getElementById('statusText').textContent = 'Complete';
            document.getElementById('statusBadge').className = 'badge bg-success text-white';
            stopDebate();
        } else if (sessionData.isPaused) {
            document.getElementById('statusText').textContent = 'Paused';
            document.getElementById('statusBadge').className = 'badge bg-warning text-dark';
            isPaused = true;
            showPauseButton();
        } else if (isDebateStarted) {
            document.getElementById('statusText').textContent = 'Active';
            document.getElementById('statusBadge').className = 'badge bg-light text-dark';
            showPauseButton();
        } else {
            document.getElementById('statusText').textContent = 'Ready';
            document.getElementById('statusBadge').className = 'badge bg-light text-dark';
        }
        
        // Update duration
        updateDuration();
    }
    
    function startDebate() {
        if (isDebateStarted) return;
        
        isDebateStarted = true;
        document.getElementById('startDebateBtn').style.display = 'none';
        showPauseButton();
        
        // Start automatic debate progression
        debateInterval = setInterval(() => {
            if (!isPaused && !sessionData.isComplete) {
                generateNextResponse();
            }
        }, 3000); // Generate response every 3 seconds
        
        // Generate first response immediately
        generateNextResponse();
        
        showAlert('Debate started!', 'success');
    }
    
    function stopDebate() {
        if (debateInterval) {
            clearInterval(debateInterval);
            debateInterval = null;
        }
        isDebateStarted = false;
        document.getElementById('startDebateBtn').style.display = 'block';
        document.getElementById('pauseResumeBtn').style.display = 'none';
    }
    
    function showPauseButton() {
        document.getElementById('pauseResumeBtn').style.display = 'block';
        document.getElementById('startDebateBtn').style.display = 'none';
    }
    
    function updateParticipantsList() {
        const container = document.getElementById('participantsList');
        container.innerHTML = '';
        
        sessionData.participants.forEach(participant => {
            const participantDiv = document.createElement('div');
            participantDiv.className = 'participant-card';
            participantDiv.innerHTML = `
                <div class="d-flex justify-content-between align-items-start">
                    <div>
                        <strong>${participant.name}</strong>
                        <br>
                        <small class="text-muted">${participant.personality}</small>
                        <br>
                        <span class="badge specialty-badge">${participant.specialty}</span>
                    </div>
                    <button class="btn btn-outline-danger btn-sm" onclick="kickParticipant(${participant.id})" title="Remove from debate">
                        <i class="bi bi-x-circle"></i>
                    </button>
                </div>
            `;
            container.appendChild(participantDiv);
        });
    }
    
    function loadMessages() {
        fetch(`/api/session/${sessionId}`)
            .then(response => response.json())
            .then(data => {
                const container = document.getElementById('debateContainer');
                container.innerHTML = '';
                
                // Check if there are messages in the debateHistory
                if (data.debateHistory && data.debateHistory.length > 0) {
                    data.debateHistory.forEach(message => {
                        addMessageToDebate(message);
                    });
                } else if (data.messages && data.messages.length > 0) {
                    // Fallback to messages if debateHistory doesn't exist
                    data.messages.forEach(message => {
                        addMessageToDebate(message);
                    });
                } else {
                    container.innerHTML = `
                        <div class="text-center text-muted py-4">
                            <i class="bi bi-hourglass-split display-4"></i>
                            <p class="mt-2">Waiting for the debate to begin...</p>
                        </div>
                    `;
                }
                

            })
            .catch(error => {
                console.error('Error loading messages:', error);
                const container = document.getElementById('debateContainer');
                container.innerHTML = `
                    <div class="text-center text-muted py-4">
                        <i class="bi bi-exclamation-triangle display-4"></i>
                        <p class="mt-2">Error loading debate messages</p>
                    </div>
                `;
            });
    }
    
    function addMessageToDebate(message) {
        const container = document.getElementById('debateContainer');
        
        // Remove the waiting message if it exists
        const waitingMessage = container.querySelector('.text-center.text-muted');
        if (waitingMessage) {
            waitingMessage.remove();
        }
        
        const messageDiv = document.createElement('div');
        messageDiv.className = 'message-card';
        messageDiv.innerHTML = `
            <div class="message-header">
                <div class="d-flex justify-content-between align-items-center">
                    <div>
                        <strong>${message.name}</strong>
                        <span class="badge specialty-badge ms-2">${message.specialty}</span>
                    </div>
                    <small class="text-muted">${formatTime(message.created_at)}</small>
                </div>
                <div class="personality-text">
                    <small>${message.personality}</small>
                </div>
            </div>
            <div class="message-content">
                ${message.content.replace(/\n/g, '<br>')}
            </div>
        `;
        
        container.appendChild(messageDiv);
        container.scrollTop = container.scrollHeight;
    }
    
    function generateNextResponse() {
        fetch(`/api/session/${sessionId}/generate-response`, {
            method: 'POST'
        })
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                // Message will be received via socket
                // Update session data after response
                loadSessionData();
            } else {
                console.error('Error generating response:', data.error);
                showAlert('Error generating response: ' + data.error, 'danger');
            }
        })
        .catch(error => {
            console.error('Error generating response:', error);
            showAlert('Error generating response', 'danger');
        });
    }
    
    function togglePause() {
        const button = document.getElementById('pauseResumeBtn');
        
        if (isPaused) {
            // Resume
            fetch(`/api/session/${sessionId}/resume`, { method: 'POST' })
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        isPaused = false;
                        button.innerHTML = '<i class="bi bi-pause-circle"></i> Pause Debate';
                        button.className = 'btn btn-outline-primary';
                        document.getElementById('statusText').textContent = 'Active';
                        document.getElementById('statusBadge').className = 'badge bg-light text-dark';
                    } else {
                        showAlert('Error resuming debate: ' + data.error, 'danger');
                    }
                })
                .catch(error => {
                    console.error('Error resuming debate:', error);
                    showAlert('Error resuming debate', 'danger');
                });
        } else {
            // Pause
            fetch(`/api/session/${sessionId}/pause`, { method: 'POST' })
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        isPaused = true;
                        button.innerHTML = '<i class="bi bi-play-circle"></i> Resume Debate';
                        button.className = 'btn btn-outline-success';
                        document.getElementById('statusText').textContent = 'Paused';
                        document.getElementById('statusBadge').className = 'badge bg-warning text-dark';
                    } else {
                        showAlert('Error pausing debate: ' + data.error, 'danger');
                    }
                })
                .catch(error => {
                    console.error('Error pausing debate:', error);
                    showAlert('Error pausing debate', 'danger');
                });
        }
    }
    
    function forceVote() {
        if (confirm('Are you sure you want to force the final vote? This will end the debate.')) {
            fetch(`/api/session/${sessionId}/force-vote`, { method: 'POST' })
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        showAlert('Final vote forced!', 'info');
                        // Reload session data to update status
                        loadSessionData();
                    } else {
                        showAlert('Error forcing vote: ' + data.error, 'danger');
                    }
                })
                .catch(error => {
                    console.error('Error forcing vote:', error);
                    showAlert('Error forcing vote', 'danger');
                });
        }
    }
    
    function kickParticipant(participantId) {
        if (confirm('Are you sure you want to remove this participant from the debate?')) {
            fetch(`/api/session/${sessionId}/kick-participant/${participantId}`, { method: 'POST' })
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        showAlert('Participant removed from debate', 'success');
                        // Reload session data to update participants list
                        loadSessionData();
                    } else {
                        showAlert('Error removing participant: ' + data.error, 'danger');
                    }
                })
                .catch(error => {
                    console.error('Error removing participant:', error);
                    showAlert('Error removing participant', 'danger');
                });
        }
    }
    
    function addParticipant() {
        const personalityName = document.getElementById('personalitySelect').value;
        if (!personalityName) {
            showAlert('Please select a personality', 'warning');
            return;
        }
        
        fetch(`/api/session/${sessionId}/add-participant`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({ personality: personalityName })
        })
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                showAlert('New participant added to debate', 'success');
                // Close modal
                bootstrap.Modal.getInstance(document.getElementById('addParticipantModal')).hide();
                document.getElementById('personalitySelect').value = '';
                // Reload session data to update participants list
                loadSessionData();
            } else {
                showAlert('Error adding participant: ' + data.error, 'danger');
            }
        })
        .catch(error => {
            console.error('Error adding participant:', error);
            showAlert('Error adding participant', 'danger');
        });
    }
    
    function updateRoundCounter() {
        if (sessionData) {
            document.getElementById('currentRound').textContent = sessionData.roundCount;
        }
    }
    
    function updateDuration() {
        if (sessionData && sessionData.created_at) {
            const startTime = new Date(sessionData.created_at);
            const now = new Date();
            const durationMs = now - startTime;
            const minutes = Math.floor(durationMs / (1000 * 60));
            const seconds = Math.floor((durationMs % (1000 * 60)) / 1000);
            document.getElementById('durationText').textContent = `${minutes}m ${seconds}s`;
        }
    }
    
    // Update duration every second
    setInterval(updateDuration, 1000);
    
    function deleteCurrentSession() {
        if (confirm('Are you sure you want to delete this debate session? This action cannot be undone.')) {
            fetch(`/api/session/${sessionId}`, {
                method: 'DELETE'
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    showAlert('Debate session deleted successfully', 'success');
                    // Redirect to sessions page after a short delay
                    setTimeout(() => {
                        window.location.href = '/sessions';
                    }, 1500);
                } else {
                    showAlert('Error deleting session: ' + data.error, 'danger');
                }
            })
            .catch(error => {
                console.error('Error deleting session:', error);
                showAlert('Error deleting session', 'danger');
            });
        }
    }
</script>
