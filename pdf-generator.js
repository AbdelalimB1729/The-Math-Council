const PDFDocument = require('pdfkit');
const { sessionOps, messageOps } = require('./database');

class PDFGenerator {
  async generateDebatePDF(sessionId) {
    try {
      // Get session and messages data
      const session = sessionOps.getById.get(sessionId);
      if (!session) {
        throw new Error('Session not found');
      }

      const messages = messageOps.getBySessionId.all(sessionId);
      if (!messages || messages.length === 0) {
        throw new Error('No messages found for this session');
      }

      // Create PDF document
      const doc = new PDFDocument({
        size: 'A4',
        margins: {
          top: 50,
          bottom: 50,
          left: 50,
          right: 50
        }
      });

      // Add title
      doc.fontSize(24)
         .font('Helvetica-Bold')
         .text('The Math Council', { align: 'center' })
         .moveDown(0.5);

      doc.fontSize(16)
         .font('Helvetica')
         .text('Debate Transcript', { align: 'center' })
         .moveDown(1);

      // Add problem information
      doc.fontSize(14)
         .font('Helvetica-Bold')
         .text('Mathematical Problem:')
         .moveDown(0.3);

      doc.fontSize(12)
         .font('Helvetica')
         .text(session.problem, { align: 'justify' })
         .moveDown(0.5);

      // Add session details
      doc.fontSize(12)
         .font('Helvetica-Bold')
         .text(`Difficulty: ${session.difficulty}`)
         .moveDown(0.2);

      doc.fontSize(12)
         .font('Helvetica-Bold')
         .text(`Date: ${new Date(session.created_at).toLocaleDateString()}`)
         .moveDown(0.2);

      doc.fontSize(12)
         .font('Helvetica-Bold')
         .text(`Time: ${new Date(session.created_at).toLocaleTimeString()}`)
         .moveDown(1);

      // Add debate transcript
      doc.fontSize(16)
         .font('Helvetica-Bold')
         .text('Debate Transcript')
         .moveDown(0.5);

      // Add each message
      messages.forEach((message, index) => {
        // Add participant name and specialty
        doc.fontSize(12)
           .font('Helvetica-Bold')
           .text(`${message.name} (${message.specialty})`, { color: '#2563eb' })
           .moveDown(0.2);

        // Add personality
        doc.fontSize(10)
           .font('Helvetica-Oblique')
           .text(`Personality: ${message.personality}`, { color: '#6b7280' })
           .moveDown(0.2);

        // Add message content
        doc.fontSize(11)
           .font('Helvetica')
           .text(message.content, { align: 'justify' })
           .moveDown(0.5);

        // Add timestamp
        doc.fontSize(9)
           .font('Helvetica-Oblique')
           .text(`Time: ${new Date(message.created_at).toLocaleTimeString()}`, { color: '#9ca3af' })
           .moveDown(0.5);

        // Add separator line (except for last message)
        if (index < messages.length - 1) {
          doc.moveTo(50, doc.y)
             .lineTo(545, doc.y)
             .stroke()
             .moveDown(0.5);
        }
      });

      // Add final summary
      doc.moveDown(1);
      doc.fontSize(14)
         .font('Helvetica-Bold')
         .text('Debate Summary')
         .moveDown(0.5);

      doc.fontSize(11)
         .font('Helvetica')
         .text(`Total participants: ${new Set(messages.map(m => m.name)).size}`)
         .moveDown(0.2);

      doc.fontSize(11)
         .font('Helvetica')
         .text(`Total messages: ${messages.length}`)
         .moveDown(0.2);

      doc.fontSize(11)
         .font('Helvetica')
         .text(`Debate duration: ${this.calculateDuration(messages)}`)
         .moveDown(1);

      // Add footer
      doc.fontSize(10)
         .font('Helvetica-Oblique')
         .text('Generated by The Math Council - AI-Powered Mathematical Debate System', { align: 'center' });

      return doc;
    } catch (error) {
      console.error('Error generating PDF:', error);
      throw error;
    }
  }

  calculateDuration(messages) {
    if (messages.length < 2) {
      return 'N/A';
    }

    const firstMessage = new Date(messages[0].created_at);
    const lastMessage = new Date(messages[messages.length - 1].created_at);
    const durationMs = lastMessage - firstMessage;
    
    const minutes = Math.floor(durationMs / (1000 * 60));
    const seconds = Math.floor((durationMs % (1000 * 60)) / 1000);
    
    return `${minutes}m ${seconds}s`;
  }
}

module.exports = new PDFGenerator();
